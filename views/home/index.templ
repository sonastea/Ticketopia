package home

import "github.com/sonastea/ticketopia/views/layouts"
import "github.com/sonastea/ticketopia/internal/models"
import "math"
import "fmt"
import "time"

type Events map[string][]models.Event

templ Index(events Events, page string) {
	@layouts.Base() {
		<style>
      @keyframes spin {
        from {
          transform: rotate(0deg);
        }
        to {
          transform: rotate(360deg);
        }
      }

      .event-details {
        display: flex;
        align-items: center;
      }

      .event-location::before {
        display: inline-block;
        width: 0.25em;
        height: 0.25em;
        background-color: currentcolor;
        border-radius: 50%;
        content: "";
        margin: 0 0.3em;
        transform: translateY(-50%);
      }

      .htmx-request.htmx-indicator {
        animation: spin 1s linear infinite;
      }
    </style>
		<div class="flex flex-col items-center justify-center overflow-auto p-4">
			<ul id="event-list" class="max-w-screen-lg w-full grid grid-cols-1 gap-4 divide-y-2">
				for name, event := range events {
					<li class="flex items-center justify-between overflow-hidden group hover:cursor-pointer" data-name={ name } hx-on:click="alert(this.getAttribute('data-name'))">
						<div class="flex-shrink-0 w-24 h-24">
							<img src={ getImageWithSize(event[len(event)-1].Images, 480, 360) } class="w-full h-full object-cover rounded-lg" alt="Event thumbnail"/>
						</div>
						<div class="flex-grow p-4">
							<div class="flex items-center justify-between">
								<div>
									<h2 class="font-semibold text-gray-800 group-hover:underline underline-offset-2">{ name }</h2>
									<div class="text-sm text-gray-800">
										<span class="sale-start-date">
											Start { convertToLocalDate(event[len(event)-1].Sales.Public.StartDateTime) }
										</span>
										<span class="sale-end-date">
											- { convertToLocalDate(event[len(event)-1].Sales.Public.EndDateTime) }
										</span>
									</div>
									<div class="text-sm text-gray-600">
										<span class="event-city">
											{ event[len(event)-1].Embedded.Venues[0].City.Name },
											{ event[len(event)-1].Embedded.Venues[0].State.Name }
										</span>
										<span class="event-location">
											{ event[len(event)-1].Embedded.Venues[0].Name }
										</span>
									</div>
								</div>
								<div class="text-sm text-blue-600">
									<a href="{eventLink}" target="_blank" class="hover:underline">Find Tickets</a>
								</div>
							</div>
						</div>
					</li>
				}
				<div class="flex justify-center items-center" id="pagination-button-container">
					<button id="pagination-button" type="button" hx-get={ fmt.Sprintf("/?page=%v", page) } hx-trigger="click" hx-target="#pagination-button-container" hx-swap="delete" hx-indicator="#spinner">Load more</button>
          <div id="spinner" class="opacity-0 htmx-indicator ml-2 rounded-full h-5 w-5 border-2 border-t-blue-700"></div>
				</div>
			</ul>
		</div>
	}
}

func convertToLocalDate(utcTime string) string {
	t, err := time.Parse(time.RFC3339, utcTime)
	if err != nil {
		return ""
	}

	localTime := t.Local()
	return localTime.Format("Oct 20")
}

func getImageWithSize(images []models.EventImage, minWidth, minHeight int) string {
	var image string
	minDiff := math.MaxInt32

	for _, img := range images {
		diffWidth := abs(img.Width - minWidth)
		diffHeight := abs(img.Height - minHeight)
		totalDiff := diffWidth + diffHeight

		if totalDiff < minDiff {
			minDiff = totalDiff
			image = img.Url
		}
	}

	return image
}

func abs(x int) int {
	if x < 0 {
		return -x
	}

	return x
}
